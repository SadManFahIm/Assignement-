
#include <windows.h>  // for MS Windows
#include <GL/glut.h>  // GLUT, include glu.h and gl.h
#include<math.h>>
# define PI           3.14159265358979323846
/* Handler for window-repaint event. Call back when the window first appears and
whenever the window needs to be re-painted. */
void display() {
	glClearColor(0.0f, 0.0f, 0.0f, 0.0f); // Set background color to black and opaque
	glClear(GL_COLOR_BUFFER_BIT);// Clear the color buffer (background)
	glScalef(.7,.7,0);
    glBegin(GL_TRIANGLES);
    glColor3f(0.0f,0.65f,0.90f);
    glVertex2f(-0.85,0.50);
    glVertex2f(-1,0.25);
    glVertex2f(-0.85,0.10);
    glEnd();
    glBegin(GL_LINES);
    glColor3f(1.0f,1.0f,0.0f);
    glVertex2f(-0.85,0.50);
    glVertex2f(-0.85,0.10);
    glVertex2f(-0.85,0.10);
    glVertex2f(0.70,0.10);
    glVertex2f(0.70,0.10);
    glVertex2f(0.85,0.25);
    glVertex2f(0.85,0.25);
    glVertex2f(0.70,0.50);
    glVertex2f(0.70,0.50);
    glVertex2f(-0.85,0.50);
    glEnd();
    glBegin(GL_TRIANGLES);
    glVertex2f(0.85,0.25);
    glVertex2f(1.0,0.75);
    glVertex2f(0.70,0.50);
    glEnd();
    glBegin(GL_LINES);
    glColor3f(0.20f,0.1f,0.55f);
    glVertex2f(-0.2f,0.5f);
    glVertex2f(-0.2f,0.40f);
    glVertex2f(-0.2f,0.40f);
    glVertex2f(-0.1f,0.40f);
    glVertex2f(-0.1f,0.40f);
    glVertex2f(-0.1f,0.15f);
    glVertex2f(-0.1f,0.15f);
    glVertex2f(-0.2f,0.15f);
    glVertex2f(-0.2f,0.15f);
    glVertex2f(-0.2f,0.10f);

    glVertex2f(0.2f,0.10f);
    glVertex2f(0.2f,0.15f);
    glVertex2f(0.2f,0.15f);
    glVertex2f(0.1f,0.15f);
    glVertex2f(0.1f,0.15f);
    glVertex2f(0.1f,0.40f);

    glVertex2f(0.1f,0.40f);
    glVertex2f(0.2f,0.40f);
    glVertex2f(0.2f,0.40f);
    glVertex2f(0.2f,0.50f);
    glEnd();





	GLfloat x=-0.65f; GLfloat y=0.05f; GLfloat radius =.05f;
	int i;
	int lineAmount = 100; //# of triangles used to draw circle

	//GLfloat radius = 0.8f; //radius
	GLfloat twicePi = 2.0f * PI;

	glBegin(GL_TRIANGLE_FAN);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();

	x=-.55f; y=0.05;  radius =.05f;
	glBegin(GL_TRIANGLE_FAN);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();

    x=0.30f; y=0.05;  radius =.05f;
	glBegin(GL_TRIANGLE_FAN);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();
    x=0.40f; y=0.05;  radius =.05f;
	glBegin(GL_TRIANGLE_FAN);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();

	    x=0.55f; y=0.05;  radius =.05f;
	glBegin(GL_TRIANGLE_FAN);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();
    x=0.65f; y=0.05;  radius =.05f;
	glBegin(GL_TRIANGLE_FAN);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();
    x=0.83f; y=0.25;  radius =.05f;
	glBegin(GL_TRIANGLE_FAN);
	glColor3f(1.0f,0.5f,1.0f);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();

	glBegin(GL_QUADS);
	glColor3f(0.0f,0.128f,0.1f);
	glVertex2f(-0.87f,0.40f);
	glVertex2f(-0.87f,0.35f);
	glVertex2f(-0.90f,0.35f);
	glVertex2f(-0.90f,0.40f);
	glEnd();

	glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(-0.80,0.25);
	glVertex2f(-0.75,0.25);
	glVertex2f(-0.75,0.30);
	glVertex2f(-0.80,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(-0.70,0.25);
	glVertex2f(-0.65,0.25);
	glVertex2f(-0.65,0.30);
	glVertex2f(-0.70,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(-0.60,0.25);
	glVertex2f(-0.55,0.25);
	glVertex2f(-0.55,0.30);
	glVertex2f(-0.60,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(-0.50,0.25);
	glVertex2f(-0.45,0.25);
	glVertex2f(-0.45,0.30);
	glVertex2f(-0.50,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(-0.40,0.25);
	glVertex2f(-0.35,0.25);
	glVertex2f(-0.35,0.30);
	glVertex2f(-0.40,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(-0.30,0.25);
	glVertex2f(-0.25,0.25);
	glVertex2f(-0.25,0.30);
	glVertex2f(-0.30,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(0.30,0.25);
	glVertex2f(0.35,0.25);
	glVertex2f(0.35,0.30);
	glVertex2f(0.30,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(0.40,0.25);
	glVertex2f(0.45,0.25);
	glVertex2f(0.45,0.30);
	glVertex2f(0.40,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(0.50,0.25);
	glVertex2f(0.55,0.25);
	glVertex2f(0.55,0.30);
	glVertex2f(0.50,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(0.60,0.25);
	glVertex2f(0.65,0.25);
	glVertex2f(0.65,0.30);
	glVertex2f(0.60,0.30);
	glEnd();

    glBegin(GL_LINES);
    glColor3f(1.0f,0.0f,0.0f);

    glVertex2f(1.0f,0.0f);
    glVertex2f(-1.0f,0.0f);
    glEnd();
    glLoadIdentity();


    glBegin(GL_QUADS);//building
    glColor3f(1.0f,0.0f,0.0f);
    glVertex2f(-0.75f,0.0f);
    glVertex2f(-0.75f,0.75f);
    glVertex2f(-0.95f,0.75f);
    glVertex2f(-0.95f,0.0f);
    glEnd();

     glBegin(GL_QUADS);
     glColor3f(0.0f,0.0f,0.0f);
     glVertex2f(-.79,.65);
     glVertex2f(-.79,.70);
     glVertex2f(-.90,.70);
     glVertex2f(-.90,.65);
     glEnd();

        glLoadIdentity();

        glTranslated(.75,0.0,0.0);
        glBegin(GL_QUADS);//building
    glColor3f(1.0f,0.0f,0.0f);
    glVertex2f(0.0f,0.0f);
    glVertex2f(0.22f,0.0f);
    glVertex2f(0.20f,0.75f);
    glVertex2f(0.0f,0.0f);
    glEnd();

     glLoadIdentity();

     glBegin(GL_QUADS);

      glColor3f(0.0f,0.0f,1.0f);
      glVertex2f(.6,.6);
      glVertex2f(.7,.6);
      glVertex2f(.7,.8);
      glVertex2f(.6,.8);
      glEnd();


      glBegin(GL_TRIANGLES);
    glColor3f(0.0f,0.65f,0.90f);
    glVertex2f(.5,.8);
    glVertex2f(.8,.8);
    glVertex2f(.65,.85);
    glEnd();
      glBegin(GL_TRIANGLES);
    glColor3f(0.0f,1.0f,0.0f);
    glVertex2f(.4,.83);
    glVertex2f(.85,.83);
    glVertex2f(.65,.88);
    glEnd();

     glTranslated(-.50,0.0,0.0);

     glBegin(GL_QUADS);

      glColor3f(0.0f,0.0f,1.0f);
      glVertex2f(.6,.6);
      glVertex2f(.7,.6);
      glVertex2f(.7,.8);
      glVertex2f(.6,.8);
      glEnd();


      glBegin(GL_TRIANGLES);
    glColor3f(1.0f,0.5f,0.90f);
    glVertex2f(.5,.8);
    glVertex2f(.8,.8);
    glVertex2f(.65,.85);
    glEnd();
      glBegin(GL_TRIANGLES);
    glColor3f(0.0f,1.0f,0.0f);
    glVertex2f(.4,.83);
    glVertex2f(.85,.83);
    glVertex2f(.65,.88);
    glEnd();

    glTranslated(-.55,0.0,0.0);


     glBegin(GL_QUADS);

      glColor3f(0.0f,0.0f,1.0f);
      glVertex2f(.6,.6);
      glVertex2f(.7,.6);
      glVertex2f(.7,.8);
      glVertex2f(.6,.8);
      glEnd();


      glBegin(GL_TRIANGLES);
    glColor3f(1.0f,1.0f,1.0f);
    glVertex2f(.5,.8);
    glVertex2f(.8,.8);
    glVertex2f(.65,.85);
    glEnd();
      glBegin(GL_TRIANGLES);
    glColor3f(0.0f,1.0f,0.0f);
    glVertex2f(.4,.83);
    glVertex2f(.85,.83);
    glVertex2f(.65,.88);
    glEnd();























	glFlush();  // Render now
}



/* Main function: GLUT runs as a console application starting at main()  */
int main(int argc, char** argv) {
	glutInit(&argc, argv);                 // Initialize GLUT
	glutCreateWindow("OpenGL Setup Test"); // Create a window with the given title
	glutInitWindowSize(320, 320);   // Set the window's initial width & height
	glutDisplayFunc(display); // Register display callback handler for window re-paint
	glutMainLoop();           // Enter the event-processing loop
	return 0;
}
