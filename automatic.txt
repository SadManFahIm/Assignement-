#include<windows.h>
#include <GL/glut.h>
#include <stdio.h>

#include <windows.h>  // for MS Windows
#include <GL/glut.h>  // GLUT, include glu.h and gl.h
#include<math.h>>
# define PI  3.14159265358979323846

GLfloat position = 0.0f;
GLfloat speed = 0.05f;
GLfloat position1 = 0.0f;
GLfloat speed1 = 0.06f;
GLfloat position2 = 0.0f;
GLfloat speed2 = 0.05f;
//int s=0;
bool nightt=true;


void update(int value) {

    if(position <-1.0)
        position = 1.0f;

    position -= speed;

	glutPostRedisplay();


	glutTimerFunc(100, update, 0);
}
void update1(int value) {

    if(position1 <1.0)
        position1 = -1.0f;

    position1 -= speed1;

	glutPostRedisplay();


	glutTimerFunc(100, update1, 0);
}

void update3(int value) {

    if(position2 >1.0)
        position2 = -1.0f;

    position2 += speed2;

	glutPostRedisplay();


	glutTimerFunc(100, update3, 0);
}
void night()
{
    glClear(GL_COLOR_BUFFER_BIT);
 glClearColor(0.0f, 0.0f, 0.0f, 1.0f);; // Set background color to black and opaque
	//glClear(GL_COLOR_BUFFER_BIT);
	glPushMatrix();
	glTranslatef(position,0.0,0.0);//ship
	glEnable(GL_LIGHTING);//Enable Light Effect

  GLfloat global_ambient[] = {150,150,0.0, 0.1};//ambient RGBA intensity of light
  glLightModelfv(GL_LIGHT_MODEL_AMBIENT, global_ambient);
	glBegin(GL_QUADS);
	glColor3ub(255,255,0);
	glVertex2f(.2,.2);
	glVertex2f(.35,-.1);
	glVertex2f(.6,-.1);
	glVertex2f(.75,.2);
	glEnd();
	glDisable(GL_LIGHTING);//Enable Light Effect
	glBegin(GL_QUADS);
	glColor3ub(51,51,255);
	glVertex2f(.42,.2);
	glVertex2f(.68,.2);
	glVertex2f(.68,.3);
	glVertex2f(.42,.3);
	glEnd();



	GLfloat  x=.48f;GLfloat y=0.25; GLfloat radius =.025f;       //first window
	glBegin(GL_TRIANGLE_FAN);
	glColor3ub(255, 204, 255);
    int i;
	int lineAmount = 100; //# of triangles used to draw circle

	//GLfloat radius = 0.8f; //radius
	GLfloat twicePi = 2.0f * PI;
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();

	  x=.58f; y=0.25;  radius =.025f;       //second window
	glBegin(GL_TRIANGLE_FAN);
	glColor3ub(255, 204, 255);
     i;
	 lineAmount = 100; //# of triangles used to draw circle

	//GLfloat radius = 0.8f; //radius
	 twicePi = 2.0f * PI;
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();

	glBegin(GL_QUADS);
	glColor3ub(255,255,0);
	glVertex2f(.50,.3);
	glVertex2f(.68,.3);
	glVertex2f(.68,.35);
	glVertex2f(.50,.35);
	glEnd();

	glBegin(GL_QUADS);
	glColor3ub(204,102,0);
	glVertex2f(.68,.2);
	glVertex2f(.75,.2);
	glVertex2f(.75,.50);
	glVertex2f(.68,.50);
	glEnd();

	glPopMatrix();

	glBegin(GL_QUADS);
	glColor3ub(51,51,255);
	glVertex2f(-1.0,-1.0);
	glVertex2f(1.0,-1.0);
	glVertex2f(1.0,0);
	glVertex2f(-1.0,0);
	glEnd();

	 glPushMatrix();
    glTranslatef(position1,0.0,0.0);


	 x=0.50f;  y=0.75f;  radius =.09f;//c1 for clouds

	glBegin(GL_TRIANGLE_FAN);
    glColor3f(1.0,1.0,1.0);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();

	 glEnable(GL_LIGHTING);//Enable Light Effect

  GLfloat global_ambient1[] = {1,1,1, 0.1};//ambient RGBA intensity of light
  glLightModelfv(GL_LIGHT_MODEL_AMBIENT, global_ambient1);


	    x=0.55f;  y=.80f;  radius =.09f;//c2 for clouds

	glBegin(GL_TRIANGLE_FAN);
     glColor3f(1.0,1.0,1.0);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();
	glDisable(GL_LIGHTING);


	glEnable(GL_LIGHTING);//Enable Light Effect

  GLfloat global_ambient2[] = {1,1,1, 0.1};//ambient RGBA intensity of light
  glLightModelfv(GL_LIGHT_MODEL_AMBIENT, global_ambient2);

		    x=0.40f;  y=.80f;  radius =.11f;//c3 for clouds

	glBegin(GL_TRIANGLE_FAN);
    glColor3f(1.0,1.0,1.0);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();
	glDisable(GL_LIGHTING);

	glPopMatrix();




	x=-.68f; y=0.70;  radius =.075f;       //moon
	glBegin(GL_TRIANGLE_FAN);
	glColor3ub(255, 255, 255);
     i;
	 lineAmount = 100; //# of triangles used to draw circle

	//GLfloat radius = 0.8f; //radius
	 twicePi = 2.0f * PI;
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();
	//day(6);




glFlush();
}

void blue()
{
     glClear(GL_COLOR_BUFFER_BIT);
 glClearColor(0.0f, 0.0f, 1.0f, 1.0f); // Set background color to black and opaque
	//glClear(GL_COLOR_BUFFER_BIT);
	glPushMatrix();
	glTranslatef(position,0.0,0.0);//ship
	glEnable(GL_LIGHTING);//Enable Light Effect

  GLfloat global_ambient[] = {150,150,0.0, 0.1};//ambient RGBA intensity of light
  glLightModelfv(GL_LIGHT_MODEL_AMBIENT, global_ambient);
	glBegin(GL_QUADS);
	glColor3ub(255,255,0);
	glVertex2f(.2,.2);
	glVertex2f(.35,-.1);
	glVertex2f(.6,-.1);
	glVertex2f(.75,.2);
	glEnd();
	glDisable(GL_LIGHTING);//Enable Light Effect
	glBegin(GL_QUADS);
	glColor3ub(51,51,255);
	glVertex2f(.42,.2);
	glVertex2f(.68,.2);
	glVertex2f(.68,.3);
	glVertex2f(.42,.3);
	glEnd();



	GLfloat  x=.48f;GLfloat y=0.25; GLfloat radius =.025f;       //first window
	glBegin(GL_TRIANGLE_FAN);
	glColor3ub(255, 204, 255);
    int i;
	int lineAmount = 100; //# of triangles used to draw circle

	//GLfloat radius = 0.8f; //radius
	GLfloat twicePi = 2.0f * PI;
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();

	  x=.58f; y=0.25;  radius =.025f;       //second window
	glBegin(GL_TRIANGLE_FAN);
	glColor3ub(255, 204, 255);
     i;
	 lineAmount = 100; //# of triangles used to draw circle

	//GLfloat radius = 0.8f; //radius
	 twicePi = 2.0f * PI;
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();

	glBegin(GL_QUADS);
	glColor3ub(255,255,0);
	glVertex2f(.50,.3);
	glVertex2f(.68,.3);
	glVertex2f(.68,.35);
	glVertex2f(.50,.35);
	glEnd();

	glBegin(GL_QUADS);
	glColor3ub(204,102,0);
	glVertex2f(.68,.2);
	glVertex2f(.75,.2);
	glVertex2f(.75,.50);
	glVertex2f(.68,.50);
	glEnd();

	glPopMatrix();

	glBegin(GL_QUADS);
	glColor3ub(51,51,255);
	glVertex2f(-1.0,-1.0);
	glVertex2f(1.0,-1.0);
	glVertex2f(1.0,0);
	glVertex2f(-1.0,0);
	glEnd();

	 glPushMatrix();
    glTranslatef(position1,0.0,0.0);


	 x=0.50f;  y=0.75f;  radius =.09f;//c1 for clouds

	glBegin(GL_TRIANGLE_FAN);
    glColor3f(1.0,1.0,1.0);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();

	 glEnable(GL_LIGHTING);//Enable Light Effect

  GLfloat global_ambient1[] = {1,1,1, 0.1};//ambient RGBA intensity of light
  glLightModelfv(GL_LIGHT_MODEL_AMBIENT, global_ambient1);


	    x=0.55f;  y=.80f;  radius =.09f;//c2 for clouds

	glBegin(GL_TRIANGLE_FAN);
     glColor3f(1.0,1.0,1.0);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();
	glDisable(GL_LIGHTING);


	glEnable(GL_LIGHTING);//Enable Light Effect

  GLfloat global_ambient2[] = {1,1,1, 0.1};//ambient RGBA intensity of light
  glLightModelfv(GL_LIGHT_MODEL_AMBIENT, global_ambient2);

		    x=0.40f;  y=.80f;  radius =.11f;//c3 for clouds

	glBegin(GL_TRIANGLE_FAN);
    glColor3f(1.0,1.0,1.0);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();
	glDisable(GL_LIGHTING);

	glPopMatrix();




	x=-.68f; y=0.70;  radius =.075f;       //moon
	glBegin(GL_TRIANGLE_FAN);
	glColor3ub(255, 255, 255);
     i;
	 lineAmount = 100; //# of triangles used to draw circle

	//GLfloat radius = 0.8f; //radius
	 twicePi = 2.0f * PI;
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();
	//day(6);




glFlush();
}

void day()
{

   glClear(GL_COLOR_BUFFER_BIT);
 glClearColor(1.0f, 1.0f, 1.0f, 1.0f); // Set background color to black and opaque
	//glClear(GL_COLOR_BUFFER_BIT);
	glPushMatrix();
	glTranslatef(position,0.0,0.0);//ship
	glEnable(GL_LIGHTING);//Enable Light Effect

  GLfloat global_ambient[] = {150,150,0.0, 0.1};//ambient RGBA intensity of light
  glLightModelfv(GL_LIGHT_MODEL_AMBIENT, global_ambient);
	glBegin(GL_QUADS);
	glColor3ub(255,255,0);
	glVertex2f(.2,.2);
	glVertex2f(.35,-.1);
	glVertex2f(.6,-.1);
	glVertex2f(.75,.2);
	glEnd();
	glDisable(GL_LIGHTING);//Enable Light Effect
	glBegin(GL_QUADS);
	glColor3ub(51,51,255);
	glVertex2f(.42,.2);
	glVertex2f(.68,.2);
	glVertex2f(.68,.3);
	glVertex2f(.42,.3);
	glEnd();



	GLfloat  x=.48f;GLfloat y=0.25; GLfloat radius =.025f;       //first window
	glBegin(GL_TRIANGLE_FAN);
	glColor3ub(255, 204, 255);
    int i;
	int lineAmount = 100; //# of triangles used to draw circle

	//GLfloat radius = 0.8f; //radius
	GLfloat twicePi = 2.0f * PI;
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();

	  x=.58f; y=0.25;  radius =.025f;       //second window
	glBegin(GL_TRIANGLE_FAN);
	glColor3ub(255, 204, 255);
     i;
	 lineAmount = 100; //# of triangles used to draw circle

	//GLfloat radius = 0.8f; //radius
	 twicePi = 2.0f * PI;
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();

	glBegin(GL_QUADS);
	glColor3ub(255,255,0);
	glVertex2f(.50,.3);
	glVertex2f(.68,.3);
	glVertex2f(.68,.35);
	glVertex2f(.50,.35);
	glEnd();

	glBegin(GL_QUADS);
	glColor3ub(204,102,0);
	glVertex2f(.68,.2);
	glVertex2f(.75,.2);
	glVertex2f(.75,.50);
	glVertex2f(.68,.50);
	glEnd();

	glPopMatrix();

	glBegin(GL_QUADS);
	glColor3ub(51,51,255);
	glVertex2f(-1.0,-1.0);
	glVertex2f(1.0,-1.0);
	glVertex2f(1.0,0);
	glVertex2f(-1.0,0);
	glEnd();

	 glPushMatrix();
    glTranslatef(position1,0.0,0.0);


	 x=0.50f;  y=0.75f;  radius =.09f;//c1 for clouds

	glBegin(GL_TRIANGLE_FAN);
    glColor3f(1.0,1.0,1.0);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();

	 glEnable(GL_LIGHTING);//Enable Light Effect

  GLfloat global_ambient1[] = {1,1,1, 0.1};//ambient RGBA intensity of light
  glLightModelfv(GL_LIGHT_MODEL_AMBIENT, global_ambient1);


	    x=0.55f;  y=.80f;  radius =.09f;//c2 for clouds

	glBegin(GL_TRIANGLE_FAN);
     glColor3f(1.0,1.0,1.0);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();
	glDisable(GL_LIGHTING);


	glEnable(GL_LIGHTING);//Enable Light Effect

  GLfloat global_ambient2[] = {1,1,1, 0.1};//ambient RGBA intensity of light
  glLightModelfv(GL_LIGHT_MODEL_AMBIENT, global_ambient2);

		    x=0.40f;  y=.80f;  radius =.11f;//c3 for clouds

	glBegin(GL_TRIANGLE_FAN);
    glColor3f(1.0,1.0,1.0);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();
	glDisable(GL_LIGHTING);

	glPopMatrix();




	x=-.68f; y=0.70;  radius =.075f;       //moon
	glBegin(GL_TRIANGLE_FAN);
	glColor3ub(255, 255, 255);
     i;
	 lineAmount = 100; //# of triangles used to draw circle

	//GLfloat radius = 0.8f; //radius
	 twicePi = 2.0f * PI;
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();
	//day(6);




glFlush();
}

void init() {
   glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
}
void Idle()
{
    glutPostRedisplay();//// marks the current window as needing to be redisplayed
}
void handleMouse(int button, int state, int x, int y) {
	if (button == GLUT_LEFT_BUTTON)
	{
    glutTimerFunc(100, update1, 0);
			speed1 = 0.0f;
			printf("clicked at (%d, %d)\n", x, y);

	}

		if (button == GLUT_RIGHT_BUTTON)
	{
	    glutTimerFunc(100, update1, 0);

			speed1 += 0.1f;
			printf("clicked at (%d, %d)\n", x, y);

	}



	glutPostRedisplay();
}

void handleKeypress(unsigned char key, int x, int y) {

	switch (key) {

case 'p':
    speed = 0.0f;
    glutTimerFunc(100, update, 0);
    break;
case 's':
    speed = 0.1f;
    glutTimerFunc(100, update, 0);
    break;
    case 'o':
    speed2 = 0.1f;
    glutTimerFunc(100, update3, 0);
    break;

     case 'd':
   //glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
   glutDisplayFunc(day);

   glutPostRedisplay();

    break;
    case 'n':
   //glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
   glutDisplayFunc(night);
    glutPostRedisplay();

    break;
    case 'b':
   //glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
   glutDisplayFunc(blue);

   glutPostRedisplay();

    break;



glutPostRedisplay();


	}


}



//void display(void)
//{
//glClear(GL_COLOR_BUFFER_BIT);
////glClearColor(0.0f, 0.0f, 0.0f, 1.0f); // Set background color to black and opaque
//	//glClear(GL_COLOR_BUFFER_BIT);
//	glPushMatrix();
//	glTranslatef(position,0.0,0.0);//ship
//	glEnable(GL_LIGHTING);//Enable Light Effect
//
//  GLfloat global_ambient[] = {150,150,0.0, 0.1};//ambient RGBA intensity of light
//  glLightModelfv(GL_LIGHT_MODEL_AMBIENT, global_ambient);
//	glBegin(GL_QUADS);
//	glColor3ub(255,255,0);
//	glVertex2f(.2,.2);
//	glVertex2f(.35,-.1);
//	glVertex2f(.6,-.1);
//	glVertex2f(.75,.2);
//	glEnd();
//	glDisable(GL_LIGHTING);//Enable Light Effect
//	glBegin(GL_QUADS);
//	glColor3ub(51,51,255);
//	glVertex2f(.42,.2);
//	glVertex2f(.68,.2);
//	glVertex2f(.68,.3);
//	glVertex2f(.42,.3);
//	glEnd();
//
//
//
//	GLfloat  x=.48f;GLfloat y=0.25; GLfloat radius =.025f;       //first window
//	glBegin(GL_TRIANGLE_FAN);
//	glColor3ub(255, 204, 255);
//    int i;
//	int lineAmount = 100; //# of triangles used to draw circle
//
//	//GLfloat radius = 0.8f; //radius
//	GLfloat twicePi = 2.0f * PI;
//		for(i = 0; i <= lineAmount;i++) {
//			glVertex2f(
//			    x + (radius * cos(i *  twicePi / lineAmount)),
//			    y + (radius* sin(i * twicePi / lineAmount))
//			);
//		}
//	glEnd();
//
//	  x=.58f; y=0.25;  radius =.025f;       //second window
//	glBegin(GL_TRIANGLE_FAN);
//	glColor3ub(255, 204, 255);
//     i;
//	 lineAmount = 100; //# of triangles used to draw circle
//
//	//GLfloat radius = 0.8f; //radius
//	 twicePi = 2.0f * PI;
//		for(i = 0; i <= lineAmount;i++) {
//			glVertex2f(
//			    x + (radius * cos(i *  twicePi / lineAmount)),
//			    y + (radius* sin(i * twicePi / lineAmount))
//			);
//		}
//	glEnd();
//
//	glBegin(GL_QUADS);
//	glColor3ub(255,255,0);
//	glVertex2f(.50,.3);
//	glVertex2f(.68,.3);
//	glVertex2f(.68,.35);
//	glVertex2f(.50,.35);
//	glEnd();
//
//	glBegin(GL_QUADS);
//	glColor3ub(204,102,0);
//	glVertex2f(.68,.2);
//	glVertex2f(.75,.2);
//	glVertex2f(.75,.50);
//	glVertex2f(.68,.50);
//	glEnd();
//
//	glPopMatrix();
//
//	glBegin(GL_QUADS);
//	glColor3ub(51,51,255);
//	glVertex2f(-1.0,-1.0);
//	glVertex2f(1.0,-1.0);
//	glVertex2f(1.0,0);
//	glVertex2f(-1.0,0);
//	glEnd();
//
//	 glPushMatrix();
//    glTranslatef(position1,0.0,0.0);
//
//
//	 x=0.50f;  y=0.75f;  radius =.09f;//c1 for clouds
//
//	glBegin(GL_TRIANGLE_FAN);
//    glColor3f(1.0,1.0,1.0);
//		for(i = 0; i <= lineAmount;i++) {
//			glVertex2f(
//			    x + (radius * cos(i *  twicePi / lineAmount)),
//			    y + (radius* sin(i * twicePi / lineAmount))
//			);
//		}
//	glEnd();
//
//	 glEnable(GL_LIGHTING);//Enable Light Effect
//
//  GLfloat global_ambient1[] = {1,1,1, 0.1};//ambient RGBA intensity of light
//  glLightModelfv(GL_LIGHT_MODEL_AMBIENT, global_ambient1);
//
//
//	    x=0.55f;  y=.80f;  radius =.09f;//c2 for clouds
//
//	glBegin(GL_TRIANGLE_FAN);
//     glColor3f(1.0,1.0,1.0);
//		for(i = 0; i <= lineAmount;i++) {
//			glVertex2f(
//			    x + (radius * cos(i *  twicePi / lineAmount)),
//			    y + (radius* sin(i * twicePi / lineAmount))
//			);
//		}
//	glEnd();
//	glDisable(GL_LIGHTING);
//
//
//	glEnable(GL_LIGHTING);//Enable Light Effect
//
//  GLfloat global_ambient2[] = {1,1,1, 0.1};//ambient RGBA intensity of light
//  glLightModelfv(GL_LIGHT_MODEL_AMBIENT, global_ambient2);
//
//		    x=0.40f;  y=.80f;  radius =.11f;//c3 for clouds
//
//	glBegin(GL_TRIANGLE_FAN);
//    glColor3f(1.0,1.0,1.0);
//		for(i = 0; i <= lineAmount;i++) {
//			glVertex2f(
//			    x + (radius * cos(i *  twicePi / lineAmount)),
//			    y + (radius* sin(i * twicePi / lineAmount))
//			);
//		}
//	glEnd();
//	glDisable(GL_LIGHTING);
//
//	glPopMatrix();
//
//
//
//
//	x=-.68f; y=0.70;  radius =.075f;       //moon
//	glBegin(GL_TRIANGLE_FAN);
//	glColor3ub(255, 255, 255);
//     i;
//	 lineAmount = 100; //# of triangles used to draw circle
//
//	//GLfloat radius = 0.8f; //radius
//	 twicePi = 2.0f * PI;
//		for(i = 0; i <= lineAmount;i++) {
//			glVertex2f(
//			    x + (radius * cos(i *  twicePi / lineAmount)),
//			    y + (radius* sin(i * twicePi / lineAmount))
//			);
//		}
//	glEnd();
//	//day(6);
//
//
//
//
//glFlush();
//
//
//}
//void sound()
//{
//
//    //PlaySound("a.wav", NULL, SND_ASYNC|SND_FILENAME);
//    PlaySound("test.wav", NULL, SND_ASYNC|SND_FILENAME|SND_LOOP);
//
//}


int main(int argc, char** argv) {
   glutInit(&argc, argv);
   glutInitWindowSize(600, 320);
   glutInitWindowPosition(50, 50);
   glutCreateWindow("Translation Animation");
   glutDisplayFunc(day);
    //glutDisplayFunc(night);
   glutKeyboardFunc(handleKeypress);
    glutMouseFunc(handleMouse);
   // timer();
   init();

  // glutTimerFunc(100, update, 0);
   //glutTimerFunc(100, update1, 0);
   //sound();
   glutMainLoop();
   return 0;
}

