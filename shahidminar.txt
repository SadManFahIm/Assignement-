#include<cstdio>

#include <GL/gl.h>
#include <GL/glut.h>
#include<math.h>>
# define PI           3.14159265358979323846


GLfloat position = 0.0f;
GLfloat speed = 0.005f;
GLfloat p = 0.0f;
GLfloat n = 0.0f;
GLfloat m = 0.0f;




void init() {
   glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
}
void Idle()
{
    glutPostRedisplay();//// marks the current window as needing to be redisplayed
}

void update(int value) {

    if(position <-1.0)
        position = 1.0f;

    position -= speed;

	glutPostRedisplay();


	glutTimerFunc(100, update, 0);
}




void display() {
   glClear(GL_COLOR_BUFFER_BIT);


   glColor3f(1.0f,0.0f,0.0f);
  int i;

	GLfloat x=-0.1f; GLfloat y=-0.2f; GLfloat radius =.2f;
	int triangleAmount = 20; //# of triangles used to draw circle

	GLfloat twicePi = 2.0f * PI;

	glBegin(GL_TRIANGLE_FAN);
		glVertex2f(x, y);
		for(i = 0; i <= triangleAmount;i++) {
			glVertex2f(
		            x + (radius * cos(i *  twicePi / triangleAmount)),
			    y + (radius * sin(i * twicePi / triangleAmount))
			);
		}

    glEnd();


    glPushMatrix();
glTranslatef(position,0.0f, 0.0f);

    glColor3f(1.0f, 1.0f, 0.0f);
    //  int i;   //sun start
    x=0.0f;  y=.7f;   radius =.08f;
    //int triangleAmount = 20;
    //GLfloat twicePi = 2.0f * PI;
	glBegin(GL_TRIANGLE_FAN);
		glVertex2f(x, y);
		for(i = 0; i <= triangleAmount;i++) {
			glVertex2f(
		            x + (radius * cos(i *  twicePi / triangleAmount)),
			    y + (radius * sin(i * twicePi / triangleAmount))
			);
		}
    glEnd();  //sun end

    glColor3f(1.0f, 1.0f, 1.0f);  //cloud start
    x=-.74f;  y=.64f;  radius =.04f;
	glBegin(GL_TRIANGLE_FAN);
		glVertex2f(x, y); // center of circle
		for(i = 0; i <= triangleAmount;i++) {
			glVertex2f(
		            x + (radius * cos(i *  twicePi / triangleAmount)),
			    y + (radius * sin(i * twicePi / triangleAmount))
			);
		}
    glEnd();

     x=-.74f;  y=.58f;  radius =.04f;
	glBegin(GL_TRIANGLE_FAN);
		glVertex2f(x, y); // center of circle
		for(i = 0; i <= triangleAmount;i++) {
			glVertex2f(
		            x + (radius * cos(i *  twicePi / triangleAmount)),
			    y + (radius * sin(i * twicePi / triangleAmount))
			);
		}
    glEnd();

     x=-.68f;  y=.64f;  radius =.04f;
	glBegin(GL_TRIANGLE_FAN);
		glVertex2f(x, y); // center of circle
		for(i = 0; i <= triangleAmount;i++) {
			glVertex2f(
		            x + (radius * cos(i *  twicePi / triangleAmount)),
			    y + (radius * sin(i * twicePi / triangleAmount))
			);
		}
    glEnd();



 x=-.68f;  y=.58f;  radius =.04f;
	glBegin(GL_TRIANGLE_FAN);
		glVertex2f(x, y); // center of circle
		for(i = 0; i <= triangleAmount;i++) {
			glVertex2f(
		            x + (radius * cos(i *  twicePi / triangleAmount)),
			    y + (radius * sin(i * twicePi / triangleAmount))
			);
		}
    glEnd();



    x=.74f;  y=.58f;  radius =.04f;
	glBegin(GL_TRIANGLE_FAN);
		glVertex2f(x, y); // center of circle
		for(i = 0; i <= triangleAmount;i++) {
			glVertex2f(
		            x + (radius * cos(i *  twicePi / triangleAmount)),
			    y + (radius * sin(i * twicePi / triangleAmount))
			);
		}
    glEnd();

     x=.68f;  y=.64f;  radius =.04f;
	glBegin(GL_TRIANGLE_FAN);
		glVertex2f(x, y); // center of circle
		for(i = 0; i <= triangleAmount;i++) {
			glVertex2f(
		            x + (radius * cos(i *  twicePi / triangleAmount)),
			    y + (radius * sin(i * twicePi / triangleAmount))
			);
		}
    glEnd();

 x=.68f;  y=.58f;  radius =.04f;
	glBegin(GL_TRIANGLE_FAN);
		glVertex2f(x, y); // center of circle
		for(i = 0; i <= triangleAmount;i++) {
			glVertex2f(
		            x + (radius * cos(i *  twicePi / triangleAmount)),
			    y + (radius * sin(i * twicePi / triangleAmount))
			);
		}
    glEnd();

     x=.74f;  y=.64f;  radius =.04f;
	glBegin(GL_TRIANGLE_FAN);
		glVertex2f(x, y); // center of circle
		for(i = 0; i <= triangleAmount;i++) {
			glVertex2f(
		            x + (radius * cos(i *  twicePi / triangleAmount)),
			    y + (radius * sin(i * twicePi / triangleAmount))
			);
		}
    glEnd();

         glPopMatrix(); //cloud end



    glColor3f(1.0f,1.0f,1.0f);
   glBegin(GL_QUADS);
    glVertex2f( -0.24f, 0.1f);
    glVertex2f( -0.24f, -0.6f);
    glVertex2f( -0.28f, -0.6f);
    glVertex2f( -0.28f, 0.1f);


    glVertex2f( -0.12f, 0.1f);
    glVertex2f( -0.12f, -0.6f);
    glVertex2f( -0.08f, -0.6f);
    glVertex2f( -0.08f, 0.1f);

    glVertex2f( 0.08f, 0.1f);
    glVertex2f( 0.08f, -0.6f);
    glVertex2f( 0.04f, -0.6f);
    glVertex2f( 0.04f, 0.1f);

    glVertex2f( -0.24f, 0.1f);
    glVertex2f( -0.32f, 0.3f);
    glVertex2f( -0.34f, 0.3f);
    glVertex2f( -0.28f, 0.1f);

    glVertex2f( -0.12f, 0.1f);
    glVertex2f( -0.08f, 0.1f);
    glVertex2f( -0.09f, 0.3f);
    glVertex2f( -0.11f, 0.3f);

    glVertex2f( 0.08f, 0.1f);
    glVertex2f( 0.14f, 0.3f);
    glVertex2f( 0.12f, 0.3f);
    glVertex2f( 0.04f, 0.1f);

    glVertex2f( -0.34f, 0.3f);
    glVertex2f( -0.34f, 0.32f);
    glVertex2f( 0.14f, 0.32f);
    glVertex2f( 0.14f, 0.3f);

    glVertex2f( -0.6f, 0.06f);
    glVertex2f( -0.6f, -0.6f);
    glVertex2f( -0.58f, -0.6f);
    glVertex2f( -0.58f, 0.06f);

    glVertex2f( -0.42f, 0.0f);
    glVertex2f( -0.42f, -0.6f);
    glVertex2f( -0.4f, -0.6f);
    glVertex2f( -0.4f, 0.0f);

    glVertex2f( -0.58f, 0.06f);
    glVertex2f( -0.58f, 0.04f);
    glVertex2f( -0.4f, 0.0f);
    glVertex2f( -0.4f, -0.02f);


    glVertex2f( -0.9f, -0.04f);
    glVertex2f( -0.9f, -0.6f);
    glVertex2f( -0.88f, -0.6f);
    glVertex2f( -0.88f, -0.04f);

    glVertex2f( -0.72f, -0.1f);
    glVertex2f( -0.72f, -0.6f);
    glVertex2f( -0.7f, -0.6f);
    glVertex2f( -0.7f, -0.1f);

    glVertex2f( -0.88f, -0.04f);
    glVertex2f( -0.88f, -0.06f);
    glVertex2f( -0.7f, -0.12f);
    glVertex2f( -0.7f, -0.1f);

    glVertex2f( 0.2f, 0.0f);
    glVertex2f( 0.2f, -0.6f);
    glVertex2f( 0.22f, -0.6f);
    glVertex2f( 0.22f, 0.0f);

    glVertex2f( 0.38f, 0.06f);
    glVertex2f( 0.38f, -0.6f);
    glVertex2f( 0.4f, -0.6f);
    glVertex2f( 0.4f, 0.06f);

    glVertex2f( 0.2f, 0.0f);
    glVertex2f( 0.2f, -0.02f);
    glVertex2f( 0.38f, 0.04f);
    glVertex2f( 0.38f, 0.06f);

    glVertex2f( 0.5f, -0.1f);
    glVertex2f( 0.5f, -0.6f);
    glVertex2f( 0.52f, -0.6f);
    glVertex2f( 0.52f, -0.1f);

    glVertex2f( 0.68f, -0.04f);
    glVertex2f( 0.68f, -0.6f);
    glVertex2f( 0.7f, -0.6f);
    glVertex2f( 0.7f, -0.04f);

    glVertex2f( 0.5f, -0.1f);
    glVertex2f( 0.5f, -0.12f);
    glVertex2f( 0.68f, -0.04f);
    glVertex2f( 0.68f, -0.06f);

    glColor3f(1.0f,0.0f,0.0f);
    glVertex2f( -1.0f, -0.6f);
    glVertex2f( -1.0f, -0.64f);
    glVertex2f( 1.0f, -0.64f);
    glVertex2f( 1.0f, -0.6f);



    glEnd();











glFlush();

}



int main(int argc, char** argv) {
   glutInit(&argc, argv);          // Initialize GLUT
    glutInitWindowSize(320, 320);
    glutInitWindowPosition(50, 50);
    glutCreateWindow("Model Transform");
    glutDisplayFunc(display);//
    init();
    glutTimerFunc(100, update, 0);
    glutMainLoop();
    return 0;
}
