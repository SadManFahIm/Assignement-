#include<cstdio>
#include <GL/gl.h>
#include <windows.h>  // for MS Windows
#include <GL/glut.h>  // GLUT, include glu.h and gl.h
#include<math.h>>
# define PI           3.14159265358979323846
GLfloat j = 0.0f;
GLfloat k = 0.0f;
GLfloat position = 0.0f;
//GLfloat position1 = 0.0f;
GLfloat speed = 0.1f;
//GLfloat speed1 = 0.1f;

void update(int value) {

    if(position <-1.0)
        position = 1.0f;

    position -= speed;

	glutPostRedisplay();


	glutTimerFunc(100, update, 0);
}

void update1(int value) {

    if(position >1.0)
        position = -1.0f;

    position += speed;

	glutPostRedisplay();


	glutTimerFunc(100, update1, 0);
}

void initGL()
{
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f); // Black and opaque
}




void init() {
   glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
}


void SpecialInput(int key, int x, int y)
{
switch(key)
{
case GLUT_KEY_UP:
//do something here

break;
case GLUT_KEY_DOWN:
break;
case GLUT_KEY_LEFT:
   glutTimerFunc(100, update, 0);
break;
case GLUT_KEY_RIGHT:

    glutTimerFunc(100, update1, 0);
//do something here
break;
}
glutPostRedisplay();
}

/* Handler for window-repaint event. Call back when the window first appears and
whenever the window needs to be re-painted. */
void display() {

	glClearColor(0.0f, 0.0f, 0.0f, 0.0f); // Set background color to black and opaque
	glClear(GL_COLOR_BUFFER_BIT);         // Clear the color buffer (background)


    GLfloat  x=-.5f;GLfloat y=0.85; GLfloat radius =.08f;
    //sun
	glBegin(GL_TRIANGLE_FAN);
	glColor3ub(255,255,0);
    int i;
	int lineAmount = 100; //# of triangles used to draw circle

	//GLfloat radius = 0.8f; //radius
	GLfloat twicePi = 2.0f * PI;
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();
	glLoadIdentity();


	glTranslatef(0.8,0.7,0.0);
	gluOrtho2D(-2.0,+2.0,-1.5,1.5);

    glBegin(GL_QUADS);         //wind mill stand
    glColor3f(0.0f,1.0f,0.0f);
    glVertex2f(0.05f,-0.7f);
    glVertex2f(0.05f,0.0f);
    glVertex2f(-0.05f,0.0f);
    glVertex2f(-0.05f,-0.7f);
    glEnd();
    //glLoadIdentity();//Reset the current matrix


    glPushMatrix(); //glPushMatrix copies the top matrix and pushes it onto the stack, while glPopMatrix pops the top matrix off the stack
   // glTranslatef(position,position, position);
    glRotatef(k,.0,0.0,1.0);

    glBegin(GL_TRIANGLES);   //wind wing 1
    glColor3f(1.0f,0.0f,0.0f);
    glVertex2f(0.0f,0.0f);
    glVertex2f(0.3f,0.2f);
    glVertex2f(0.2f,0.3f);
    glEnd();

    glBegin(GL_TRIANGLES);    //wind wing 2
    glColor3f(1.0f,1.0f,0.0f);
    glVertex2f(0.0f,0.0f);
    glVertex2f(0.3f,-0.2f);
    glVertex2f(0.2f,-0.3f);
    glEnd();

    glBegin(GL_TRIANGLES);    //wind wing 3
    glColor3f(1.0f,0.0f,0.0f);
    glVertex2f(0.0f,0.0f);
    glVertex2f(-0.3f,-0.2f);
    glVertex2f(-0.2f,-0.3f);
    glEnd();

    glBegin(GL_TRIANGLES);     //wind wing 4
    glColor3f(1.0f,1.0f,0.0f);
    glVertex2f(0.0f,0.0f);
    glVertex2f(-0.3f,0.2f);
    glVertex2f(-0.2f,0.3f);
    glEnd();

    glPopMatrix();//while glPopMatrix pops the top matrix off the stack

    k+=.4f;









    glBegin(GL_POLYGON);                  //mountain
    glColor3ub(0,128,0);
    glVertex2f(-1.0f,0.0f);
    glVertex2f(-0.95f,0.325f);
    glVertex2f(-0.65f,0.75f);
    glVertex2f(-0.50f,0.525f);
    glVertex2f(-0.35f,0.1f);
    glVertex2f(-0.15f,0.525f);
    glVertex2f(-0.15f,0.525f);
    glVertex2f(0.25f,1.0f);
    glVertex2f(1.0f,0.0f);

    glEnd();

    glLoadIdentity();
    glBegin(GL_QUADS);         //atc tower
    glColor3f(1.0f,0.0f,0.0f);
    glVertex2f(0.55f,0.0f);
    glVertex2f(0.55f,0.65f);
    glVertex2f(0.50f,0.65f);
    glVertex2f(0.50f,0.0f);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.5f,0.5f);
    glVertex2f(0.30f,0.85f);
    glVertex2f(0.30f,0.65f);
    glVertex2f(0.75f,0.65f);
    glVertex2f(0.75f,0.85f);
    glEnd();
    glLoadIdentity();




    glTranslatef(-0.3f,0.7f,0);
    glBegin(GL_QUADS);         //wind mill stand
    glColor3f(0.0f,1.0f,0.0f);
    glVertex2f(0.05f,-0.7f);
    glVertex2f(0.05f,0.0f);
    glVertex2f(-0.05f,0.0f);
    glVertex2f(-0.05f,-0.7f);
    glEnd();
    //glLoadIdentity();//Reset the current matrix


    glPushMatrix(); //glPushMatrix copies the top matrix and pushes it onto the stack, while glPopMatrix pops the top matrix off the stack
   // glTranslatef(position,position, position);
    glRotatef(j,.0,0.0,1.0);

    glBegin(GL_TRIANGLES);   //wind wing 1
    glColor3f(1.0f,0.0f,0.0f);
    glVertex2f(0.0f,0.0f);
    glVertex2f(0.3f,0.2f);
    glVertex2f(0.2f,0.3f);
    glEnd();

    glBegin(GL_TRIANGLES);    //wind wing 2
    glColor3f(1.0f,0.0f,0.0f);
    glVertex2f(0.0f,0.0f);
    glVertex2f(0.3f,-0.2f);
    glVertex2f(0.2f,-0.3f);
    glEnd();

    glBegin(GL_TRIANGLES);    //wind wing 3
    glColor3f(1.0f,0.0f,0.0f);
    glVertex2f(0.0f,0.0f);
    glVertex2f(-0.3f,-0.2f);
    glVertex2f(-0.2f,-0.3f);
    glEnd();

    glBegin(GL_TRIANGLES);     //wind wing 4
    glColor3f(1.0f,0.0f,0.0f);
    glVertex2f(0.0f,0.0f);
    glVertex2f(-0.3f,0.2f);
    glVertex2f(-0.2f,0.3f);
    glEnd();

    glPopMatrix();//while glPopMatrix pops the top matrix off the stack

    j+=.9f;








    glLoadIdentity();                   //airplane
    glPushMatrix();
    glTranslatef(position,0.0f, 0.0f);
    glScalef(0.7f,0.7f,0.0f);
    glBegin(GL_TRIANGLES);            //airplane
    glColor3f(0.0f,0.65f,0.90f);
    glVertex2f(-0.85,0.50);
    glVertex2f(-1,0.25);
    glVertex2f(-0.85,0.10);
    glEnd();
    glBegin(GL_POLYGON);
    glColor3ub(128,0,0);
    glVertex2f(-0.85,0.50);
    glVertex2f(-0.85,0.10);
    glVertex2f(-0.85,0.10);
    glVertex2f(0.70,0.10);
    glVertex2f(0.70,0.10);
    glVertex2f(0.85,0.25);
    glVertex2f(0.85,0.25);
    glVertex2f(0.70,0.50);
    glVertex2f(0.70,0.50);
    glVertex2f(-0.85,0.50);
    glEnd();
    glBegin(GL_TRIANGLES);
    glColor3f(0.567f,0.76f,0.0f);
    glVertex2f(0.85,0.25);
    glVertex2f(1.0,0.75);
    glVertex2f(0.70,0.50);
    glEnd();
    glBegin(GL_LINES);
    glColor3f(0.20f,0.1f,0.55f);
    glVertex2f(-0.2f,0.5f);
    glVertex2f(-0.2f,0.40f);
    glVertex2f(-0.2f,0.40f);
    glVertex2f(-0.1f,0.40f);
    glVertex2f(-0.1f,0.40f);
    glVertex2f(-0.1f,0.15f);
    glVertex2f(-0.1f,0.15f);
    glVertex2f(-0.2f,0.15f);
    glVertex2f(-0.2f,0.15f);
    glVertex2f(-0.2f,0.10f);

    glVertex2f(0.2f,0.10f);
    glVertex2f(0.2f,0.15f);
    glVertex2f(0.2f,0.15f);
    glVertex2f(0.1f,0.15f);
    glVertex2f(0.1f,0.15f);
    glVertex2f(0.1f,0.40f);

    glVertex2f(0.1f,0.40f);
    glVertex2f(0.2f,0.40f);
    glVertex2f(0.2f,0.40f);
    glVertex2f(0.2f,0.50f);
    glEnd();





	 x=-0.65f;  y=0.05f;  radius =.05f;


	glBegin(GL_TRIANGLE_FAN);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();

	x=-.55f; y=0.05;  radius =.05f;
	glBegin(GL_TRIANGLE_FAN);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();

    x=0.30f; y=0.05;  radius =.05f;
	glBegin(GL_TRIANGLE_FAN);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();
    x=0.40f; y=0.05;  radius =.05f;
	glBegin(GL_TRIANGLE_FAN);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();

	    x=0.55f; y=0.05;  radius =.05f;
	glBegin(GL_TRIANGLE_FAN);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();
    x=0.65f; y=0.05;  radius =.05f;
	glBegin(GL_TRIANGLE_FAN);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();
    x=0.83f; y=0.25;  radius =.05f;
	glBegin(GL_TRIANGLE_FAN);
	glColor3f(1.0f,0.5f,1.0f);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();

	glBegin(GL_QUADS);
	glColor3f(0.0f,0.128f,0.1f);
	glVertex2f(-0.87f,0.40f);
	glVertex2f(-0.87f,0.35f);
	glVertex2f(-0.90f,0.35f);
	glVertex2f(-0.90f,0.40f);
	glEnd();

	glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(-0.80,0.25);
	glVertex2f(-0.75,0.25);
	glVertex2f(-0.75,0.30);
	glVertex2f(-0.80,0.30);
	glEnd();


    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(-0.70,0.25);
	glVertex2f(-0.65,0.25);
	glVertex2f(-0.65,0.30);
	glVertex2f(-0.70,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(-0.60,0.25);
	glVertex2f(-0.55,0.25);
	glVertex2f(-0.55,0.30);
	glVertex2f(-0.60,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(-0.50,0.25);
	glVertex2f(-0.45,0.25);
	glVertex2f(-0.45,0.30);
	glVertex2f(-0.50,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(-0.40,0.25);
	glVertex2f(-0.35,0.25);
	glVertex2f(-0.35,0.30);
	glVertex2f(-0.40,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(-0.30,0.25);
	glVertex2f(-0.25,0.25);
	glVertex2f(-0.25,0.30);
	glVertex2f(-0.30,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(0.30,0.25);
	glVertex2f(0.35,0.25);
	glVertex2f(0.35,0.30);
	glVertex2f(0.30,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(0.40,0.25);
	glVertex2f(0.45,0.25);
	glVertex2f(0.45,0.30);
	glVertex2f(0.40,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(0.50,0.25);
	glVertex2f(0.55,0.25);
	glVertex2f(0.55,0.30);
	glVertex2f(0.50,0.30);
	glEnd();


    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(0.60,0.25);
	glVertex2f(0.65,0.25);
	glVertex2f(0.65,0.30);
	glVertex2f(0.60,0.30);
	glEnd();

    glBegin(GL_LINES);
    glColor3f(1.0f,0.0f,0.0f);

    glVertex2f(1.0f,0.0f);
    glVertex2f(-1.0f,0.0f);
    glEnd();
    glLoadIdentity();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
    glVertex2f(-0.75f,0.0f);
    glVertex2f(-0.75f,0.75f);
    glVertex2f(-0.95f,0.75f);
    glVertex2f(-0.95f,0.0f);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0.879,0.256,0.589);
    glVertex2f(-0.79f,0.65f);
    glVertex2f(-0.79f,0.70f);
    glVertex2f(-0.90f,0.70f);
    glVertex2f(-0.90f,0.65f);
    glEnd();
    glPopMatrix();

    glLoadIdentity();
    glColor3ub(235, 181, 235);
   // glScalef(0.7,0.2,0);
    glTranslated(+0.75,0.0,0);
    glBegin(GL_QUADS);
    glColor3f(1.0f,0.5f,0.0f);
    glVertex2f(0.0f,0.0f);
    glVertex2f(0.20f,0.0f);
    glVertex2f(0.20f,0.55f);
    glVertex2f(0.0f,0.45f);
    glEnd();



    //////////
                            //duplicate plane
    glLoadIdentity();
   // glPushMatrix();
//glTranslatef(position1,0.0f, 0.0f);
    glScalef(0.5f,0.5f,0.0f);
    glTranslated(-0.95f,-0.8f,0);
    glBegin(GL_TRIANGLES);            //airplane
    glColor3f(0.0f,0.65f,0.90f);
    glVertex2f(-0.85,0.50);
    glVertex2f(-1,0.25);
    glVertex2f(-0.85,0.10);
    glEnd();
    glBegin(GL_POLYGON);
    glColor3ub(0,128,128);
    glVertex2f(-0.85,0.50);
    glVertex2f(-0.85,0.10);
    glVertex2f(-0.85,0.10);
    glVertex2f(0.70,0.10);
    glVertex2f(0.70,0.10);
    glVertex2f(0.85,0.25);
    glVertex2f(0.85,0.25);
    glVertex2f(0.70,0.50);
    glVertex2f(0.70,0.50);
    glVertex2f(-0.85,0.50);
    glEnd();
    glBegin(GL_TRIANGLES);
    glColor3f(0.567f,0.76f,0.0f);
    glVertex2f(0.85,0.25);
    glVertex2f(1.0,0.75);
    glVertex2f(0.70,0.50);
    glEnd();
    glBegin(GL_LINES);
    glColor3f(0.20f,0.1f,0.55f);
    glVertex2f(-0.2f,0.5f);
    glVertex2f(-0.2f,0.40f);
    glVertex2f(-0.2f,0.40f);
    glVertex2f(-0.1f,0.40f);
    glVertex2f(-0.1f,0.40f);
    glVertex2f(-0.1f,0.15f);
    glVertex2f(-0.1f,0.15f);
    glVertex2f(-0.2f,0.15f);
    glVertex2f(-0.2f,0.15f);
    glVertex2f(-0.2f,0.10f);

    glVertex2f(0.2f,0.10f);
    glVertex2f(0.2f,0.15f);
    glVertex2f(0.2f,0.15f);
    glVertex2f(0.1f,0.15f);
    glVertex2f(0.1f,0.15f);
    glVertex2f(0.1f,0.40f);

    glVertex2f(0.1f,0.40f);
    glVertex2f(0.2f,0.40f);
    glVertex2f(0.2f,0.40f);
    glVertex2f(0.2f,0.50f);
    glEnd();





	 x=-0.65f;  y=0.05f;  radius =.05f;


	glBegin(GL_TRIANGLE_FAN);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();

	x=-.55f; y=0.05;  radius =.05f;
	glBegin(GL_TRIANGLE_FAN);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();

    x=0.30f; y=0.05;  radius =.05f;
	glBegin(GL_TRIANGLE_FAN);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();
    x=0.40f; y=0.05;  radius =.05f;
	glBegin(GL_TRIANGLE_FAN);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();

	    x=0.55f; y=0.05;  radius =.05f;
	glBegin(GL_TRIANGLE_FAN);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();
    x=0.65f; y=0.05;  radius =.05f;
	glBegin(GL_TRIANGLE_FAN);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();
    x=0.83f; y=0.25;  radius =.05f;
	glBegin(GL_TRIANGLE_FAN);
	glColor3f(1.0f,0.5f,1.0f);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();

	glBegin(GL_QUADS);
	glColor3f(0.0f,0.128f,0.1f);
	glVertex2f(-0.87f,0.40f);
	glVertex2f(-0.87f,0.35f);
	glVertex2f(-0.90f,0.35f);
	glVertex2f(-0.90f,0.40f);
	glEnd();

	glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(-0.80,0.25);
	glVertex2f(-0.75,0.25);
	glVertex2f(-0.75,0.30);
	glVertex2f(-0.80,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(-0.70,0.25);
	glVertex2f(-0.65,0.25);
	glVertex2f(-0.65,0.30);
	glVertex2f(-0.70,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(-0.60,0.25);
	glVertex2f(-0.55,0.25);
	glVertex2f(-0.55,0.30);
	glVertex2f(-0.60,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(-0.50,0.25);
	glVertex2f(-0.45,0.25);
	glVertex2f(-0.45,0.30);
	glVertex2f(-0.50,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(-0.40,0.25);
	glVertex2f(-0.35,0.25);
	glVertex2f(-0.35,0.30);
	glVertex2f(-0.40,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(-0.30,0.25);
	glVertex2f(-0.25,0.25);
	glVertex2f(-0.25,0.30);
	glVertex2f(-0.30,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(0.30,0.25);
	glVertex2f(0.35,0.25);
	glVertex2f(0.35,0.30);
	glVertex2f(0.30,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(0.40,0.25);
	glVertex2f(0.45,0.25);
	glVertex2f(0.45,0.30);
	glVertex2f(0.40,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(0.50,0.25);
	glVertex2f(0.55,0.25);
	glVertex2f(0.55,0.30);
	glVertex2f(0.50,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(0.60,0.25);
	glVertex2f(0.65,0.25);
	glVertex2f(0.65,0.30);
	glVertex2f(0.60,0.30);
	glEnd();

    glBegin(GL_LINES);
    glColor3f(1.0f,0.0f,0.0f);

    glVertex2f(1.0f,0.0f);
    glVertex2f(-1.0f,0.0f);
    glEnd();
    glLoadIdentity();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
    glVertex2f(-0.75f,0.0f);
    glVertex2f(-0.75f,0.75f);
    glVertex2f(-0.95f,0.75f);
    glVertex2f(-0.95f,0.0f);
    glEnd();
   // glPopMatrix();


                                    //another plane3
    glScalef(0.5f,0.5f,0.0f);
    glTranslated(0.25f,-0.95f,0);
    glBegin(GL_TRIANGLES);            //airplane
    glColor3f(0.0f,0.65f,0.90f);
    glVertex2f(-0.85,0.50);
    glVertex2f(-1,0.25);
    glVertex2f(-0.85,0.10);
    glEnd();
    glBegin(GL_POLYGON);
    glColor3ub(128,0,128);
    //glColor3f(1.0f,1.0f,0.0f);
    glVertex2f(-0.85,0.50);
    glVertex2f(-0.85,0.10);
    glVertex2f(-0.85,0.10);
    glVertex2f(0.70,0.10);
    glVertex2f(0.70,0.10);
    glVertex2f(0.85,0.25);
    glVertex2f(0.85,0.25);
    glVertex2f(0.70,0.50);
    glVertex2f(0.70,0.50);
    glVertex2f(-0.85,0.50);
    glEnd();
    glBegin(GL_TRIANGLES);
    glColor3f(0.567f,0.76f,0.0f);
    glVertex2f(0.85,0.25);
    glVertex2f(1.0,0.75);
    glVertex2f(0.70,0.50);
    glEnd();
    glBegin(GL_LINES);
    //glColor3ub(128,0,128);
    glColor3f(0.20f,0.1f,0.55f);
    glVertex2f(-0.2f,0.5f);
    glVertex2f(-0.2f,0.40f);
    glVertex2f(-0.2f,0.40f);
    glVertex2f(-0.1f,0.40f);
    glVertex2f(-0.1f,0.40f);
    glVertex2f(-0.1f,0.15f);
    glVertex2f(-0.1f,0.15f);
    glVertex2f(-0.2f,0.15f);
    glVertex2f(-0.2f,0.15f);
    glVertex2f(-0.2f,0.10f);

    glVertex2f(0.2f,0.10f);
    glVertex2f(0.2f,0.15f);
    glVertex2f(0.2f,0.15f);
    glVertex2f(0.1f,0.15f);
    glVertex2f(0.1f,0.15f);
    glVertex2f(0.1f,0.40f);

    glVertex2f(0.1f,0.40f);
    glVertex2f(0.2f,0.40f);
    glVertex2f(0.2f,0.40f);
    glVertex2f(0.2f,0.50f);
    glEnd();





	 x=-0.65f;  y=0.05f;  radius =.05f;


	glBegin(GL_TRIANGLE_FAN);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();

	x=-.55f; y=0.05;  radius =.05f;
	glBegin(GL_TRIANGLE_FAN);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();

    x=0.30f; y=0.05;  radius =.05f;
	glBegin(GL_TRIANGLE_FAN);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();
    x=0.40f; y=0.05;  radius =.05f;
	glBegin(GL_TRIANGLE_FAN);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();

	    x=0.55f; y=0.05;  radius =.05f;
	glBegin(GL_TRIANGLE_FAN);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();
    x=0.65f; y=0.05;  radius =.05f;
	glBegin(GL_TRIANGLE_FAN);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();
    x=0.83f; y=0.25;  radius =.05f;
	glBegin(GL_TRIANGLE_FAN);
	glColor3f(1.0f,0.5f,1.0f);
		for(i = 0; i <= lineAmount;i++) {
			glVertex2f(
			    x + (radius * cos(i *  twicePi / lineAmount)),
			    y + (radius* sin(i * twicePi / lineAmount))
			);
		}
	glEnd();

	glBegin(GL_QUADS);
	glColor3f(0.0f,0.128f,0.1f);
	glVertex2f(-0.87f,0.40f);
	glVertex2f(-0.87f,0.35f);
	glVertex2f(-0.90f,0.35f);
	glVertex2f(-0.90f,0.40f);
	glEnd();

	glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(-0.80,0.25);
	glVertex2f(-0.75,0.25);
	glVertex2f(-0.75,0.30);
	glVertex2f(-0.80,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(-0.70,0.25);
	glVertex2f(-0.65,0.25);
	glVertex2f(-0.65,0.30);
	glVertex2f(-0.70,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(-0.60,0.25);
	glVertex2f(-0.55,0.25);
	glVertex2f(-0.55,0.30);
	glVertex2f(-0.60,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(-0.50,0.25);
	glVertex2f(-0.45,0.25);
	glVertex2f(-0.45,0.30);
	glVertex2f(-0.50,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(-0.40,0.25);
	glVertex2f(-0.35,0.25);
	glVertex2f(-0.35,0.30);
	glVertex2f(-0.40,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(-0.30,0.25);
	glVertex2f(-0.25,0.25);
	glVertex2f(-0.25,0.30);
	glVertex2f(-0.30,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(0.30,0.25);
	glVertex2f(0.35,0.25);
	glVertex2f(0.35,0.30);
	glVertex2f(0.30,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(0.40,0.25);
	glVertex2f(0.45,0.25);
	glVertex2f(0.45,0.30);
	glVertex2f(0.40,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(0.50,0.25);
	glVertex2f(0.55,0.25);
	glVertex2f(0.55,0.30);
	glVertex2f(0.50,0.30);
	glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
	glVertex2f(0.60,0.25);
	glVertex2f(0.65,0.25);
	glVertex2f(0.65,0.30);
	glVertex2f(0.60,0.30);
	glEnd();

    glBegin(GL_LINES);
    glColor3f(1.0f,0.0f,0.0f);

    glVertex2f(1.0f,0.0f);
    glVertex2f(-1.0f,0.0f);
    glEnd();
    glLoadIdentity();

    glBegin(GL_QUADS);
    glColor3f(1.0f,0.0f,0.0f);
    glVertex2f(-0.75f,0.0f);
    glVertex2f(-0.75f,0.75f);
    glVertex2f(-0.95f,0.75f);
    glVertex2f(-0.95f,0.0f);
    glEnd();
    glLoadIdentity();

    glBegin(GL_QUADS); //ROADS
    glColor3ub(192,192,192);
    glVertex2f(0.85f,0.0f);
    glVertex2f(0.65f,0.0f);
    glVertex2f(0.65f,-1.0f);
    glVertex2f(0.85f,-1.0f);
    glEnd();
    glBegin(GL_QUADS);
    glVertex2f(0.65f,-0.50f);
    glVertex2f(-1.0f,-0.50f);
    glVertex2f(-1.0f,-0.70f);
    glVertex2f(0.65f,-0.70f);
    glEnd();





	glFlush();  // Render now
}



/* Main function: GLUT runs as a console application starting at main()  */
int main(int argc, char** argv) {
	glutInit(&argc, argv);                 // Initialize GLUT
	glutCreateWindow("OpenGL Setup Test"); // Create a window with the given title
	glutInitWindowSize(320, 320);   // Set the window's initial width & height
	glutDisplayFunc(display); // Register display callback handler for window re-paint
    //initGL();
    //glutIdleFunc(Idle);
   // glutTimerFunc(100, update, 0);
    //glutTimerFunc(100, update1, 0);
    init();
    glutSpecialFunc(SpecialInput);
	glutMainLoop();           // Enter the event-processing loop
	return 0;
}
